# -*- coding: utf-8 -*-
"""Cointab_Assignment_by_Shant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LpKKndBH_8giwRyZ5rezH1yMMI6pNRfu

# **Cointab Software Private Limited**

# *Data Analyst - Assignment*

# Import Libraries and read **files**
"""

import math
import numpy as np
import pandas as pd
order_report = pd.read_excel("/content/Company X - Order Report.xlsx")
pin_zone = pd.read_excel("/content/Company X - Pincode Zones.xlsx")
sku = pd.read_excel("/content/Company X - SKU Master.xlsx")
invoice = pd.read_excel("/content/Courier Company - Invoice.xlsx")
rates = pd.read_excel("/content/Courier Company - Rates.xlsx")

"""# **Missing Values**"""

print("Missing Values in order Report are :\n",order_report.isna().sum())
print("Missing Values in Pincode are :\n",pin_zone.isna().sum())
print("Missing Values in SKU are :\n",sku.isna().sum())
print("Missing Values in Invoice are :\n",invoice.isna().sum())
print("Missing Values in Rates are :\n",rates.isna().sum())

"""#Duplicate Value"""

print("Number of duplicate rows in order Report is :",order_report.duplicated().sum())
print("Number of duplicate rows in Pincode is :",pin_zone.duplicated().sum())
print("Number of duplicate rows in SKU is :",sku.duplicated().sum())
print("Number of duplicate rows in Invoice is :",invoice.duplicated().sum())
print("Number of duplicate rows in Rates is :",rates.duplicated().sum())

"""# **Drop** Duplicates"""

# Dropping duplicate rows
order_report.drop_duplicates(inplace=True)
sku.drop_duplicates(inplace=True)
pin_zone.drop_duplicates(inplace=True)

"""#Merge"""

# Add weight per item column to order report
data = order_report.merge(sku,how='left',on='SKU')
print(data)

"""# total weight of item in KG"""

data['Total_Weight_by_X(kg)'] = data['Weight (g)']*data['Order Qty']/1000
print(data)

"""# Drop unnecessary columns"""

data.drop(labels=['Order Qty','Weight (g)','SKU'],axis=1,inplace=True)
print(data)

"""# Total weight and Amount for each order"""

data = data.groupby(by=['ExternOrderNo'],as_index=False).sum()
data.shape

"""# Lets merge invoice data"""

data = data.merge(invoice,how='left',left_on='ExternOrderNo',right_on='Order ID')
print(data)

"""# merge invoice with pincode data
# rename zone columns from invoice data as zone_by_courier and pincode as zone_by_X
"""

data = data.merge(pin_zone,how='left',on=['Warehouse Pincode','Customer Pincode'])


data = data.rename(columns={'Zone_x':'Zone_by_Courier','Zone_y':'Zone_by_X'})

rates['Zone'].unique()

"""# Convert Uppercase to lowercase"""

rates['Zone'] = rates['Zone'].str.lower()

data = data.merge(rates,how='left',left_on='Zone_by_X',right_on='Zone')

"""# Forward additional charge"""

data['Forward_additional_charge'] = (data['Total_Weight_by_X(kg)']/data['Weight Slabs']).astype(int)*data['Forward Additional Weight Slab Charge']

"""# Fixed RTO charges for forward and rto order"""

def fixed_rto_charge(row):
    if row['Type of Shipment'] == 'Forward and RTO charges':
        return row['RTO Fixed Charge']
    elif row['Type of Shipment'] == 'Forward charges':
        return 0
    else:
        return None

data['RTO_fixed_charge'] = data.apply(fixed_rto_charge, axis=1)

"""# Additional RTO charges for forward and rto order"""

def additional_rto_charge(row):
    if row['Type of Shipment'] == 'Forward and RTO charges':
        return math.floor(row['Total_Weight_by_X(kg)']/row['Weight Slabs'])*row['RTO Additional Weight Slab Charge']
    elif row['Type of Shipment'] == 'Forward charges':
        return 0
    else:
        return None

data['RTO_additional_charge'] = data.apply(additional_rto_charge, axis=1)

"""# Calculate total expected charge for delivery"""

data['Expected_charges'] = data['Forward Fixed Charge'] + data['Forward_additional_charge'] + data['RTO_fixed_charge'] + data['RTO_additional_charge']

"""# Difference between expected and billed charges"""

data['diff_charges'] =  data['Expected_charges'] - data['Billing Amount (Rs.)']

"""# Add column weight slab charged by courier for output"""

data['Weight_slabs_Courier'] = data['Zone_by_Courier'].replace(to_replace=['a','b','c','d','e'],value=[0.25,0.5,0.75,1.25,1.5])

"""# add column to check if courier company overcharged or undercharged"""

def is_correct(row):
    if row['diff_charges'] == 0:
        return 'X correctly charged'
    elif row['diff_charges'] > 0:
        return 'X Undercharged'
    else:
        return 'X Overcharged'
data['over_or_under_charged'] = data.apply(is_correct,axis=1)

data.columns

output = data[['Order ID','AWB Code','Total_Weight_by_X(kg)','Weight Slabs','Charged Weight','Weight_slabs_Courier','Zone_by_X',
               'Zone_by_Courier','Expected_charges','Billing Amount (Rs.)','diff_charges']]
print(output)

summary = pd.DataFrame(index=['Total orders where X has been correctly charged'
                              ,'Total Orders where X has been overcharged'
                              ,'Total Orders where X has been undercharged'
                             ], columns=['Count','Amount(Rs.)'])


summary['Count'] = [(data['diff_charges']==0).sum(),
                    (data['diff_charges']<0).sum(),
                    (data['diff_charges']>0).sum()]

summary['Amount(Rs.)'] = [data[data['diff_charges']==0]['Billing Amount (Rs.)'].sum()
                          ,abs(data[data['diff_charges']<0]['diff_charges'].sum())
                          ,data[data['diff_charges']>0]['diff_charges'].sum()]
print(summary)

output.to_excel("/content/Output.xlsx")
summary.to_excel("/content/Summary.xlsx")